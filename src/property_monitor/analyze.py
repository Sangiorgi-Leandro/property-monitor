"""
Module for analyzing and visualizing property data scraped from Rightmove.

It reads the latest CSV export, cleans the price data, calculates basic statistics,
and generates a price distribution histogram saved as a PNG image.
"""

# Standard library imports
import logging
from pathlib import Path

# Third-party library imports
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configure logging for this analysis script. Messages will be written to 'output/analyze_rightmove.log'.
logging.basicConfig(
    filename="output/analyze_rightmove.log",  # Log file will be placed in the 'output' directory
    level=logging.INFO,  # Minimum level of messages to log
    format="%(asctime)s - %(levelname)s - %(message)s",  # Log message format
)

# --- CSV File Discovery ---
# Search for the most recent CSV file matching the pattern "rightmove_properties_*.csv".
# This assumes the CSV files are generated by the scraping script in the 'output' directory.
csv_files_path = Path("output/")  # Directory where CSV files are expected
list_of_files = list(csv_files_path.glob("rightmove_properties_*.csv"))

if not list_of_files:
    logging.error(
        f"No CSV files found matching pattern 'rightmove_properties_*.csv' in '{csv_files_path}'."
    )
    raise FileNotFoundError(
        f"No CSV files found matching pattern 'rightmove_properties_*.csv' in '{csv_files_path}'. "
        "Please ensure the scraping script has been run and generated output."
    )

# Select the latest CSV file based on its modification time.
latest_file = max(list_of_files, key=lambda x: x.stat().st_mtime)
CSV_PATH = latest_file.as_posix()  # Convert Path object to string for pandas

logging.info(f"Selected CSV file for analysis: {CSV_PATH}")

# --- Data Loading and Cleaning ---
try:
    # Read the CSV file into a Pandas DataFrame.
    df = pd.read_csv(CSV_PATH)
except pd.errors.EmptyDataError:
    logging.error(f"The CSV file '{CSV_PATH}' is empty. No data to analyze.")
    raise ValueError(f"The CSV file '{CSV_PATH}' is empty. No data to analyze.")
except FileNotFoundError:  # Although already checked, good for robustness
    logging.error(f"The CSV file '{CSV_PATH}' was not found.")
    raise

# Remove rows where the 'price' column is null (missing prices).
df = df[df["price"].notnull()]
logging.info(f"Removed {len(df[df['price'].isnull()])} rows with null prices.")


# Clean the 'price' column: remove currency symbols and commas, then extract numbers and convert to float.
df["price_clean"] = (
    df["price"]
    .astype(str)  # Ensure it's a string
    .str.replace("Â£", "", regex=False)  # Remove currency symbol
    .str.replace(",", "", regex=False)  # Remove thousands separator
    .str.extract(r"(\d+)")  # Extract only digits
    .astype(float)  # Convert to float
)

# Remove rows where a valid numeric price could not be extracted (e.g., due to parsing errors).
initial_rows = len(df)
df = df[df["price_clean"].notnull()]
logging.info(
    f"Removed {initial_rows - len(df)} rows where a valid price could not be extracted."
)

# --- Price Statistics ---
# Calculate mean, minimum, and maximum prices.
mean_price = df["price_clean"].mean()
min_price = df["price_clean"].min()
max_price = df["price_clean"].max()

logging.info(f"Average price: Â£{mean_price:,.0f}")
logging.info(f"Minimum price: Â£{min_price:,.0f}")
logging.info(f"Maximum price: Â£{max_price:,.0f}")

# Print statistics to the console for immediate feedback.
print("\nðŸ“Š Price Statistics:")
print(f"- Average: Â£{mean_price:,.0f}")
print(f"- Minimum: Â£{min_price:,.0f}")
print(f"- Maximum: Â£{max_price:,.0f}")

# --- Save Cleaned Data ---
# Save the cleaned DataFrame to a new CSV file in the 'output' directory.
cleaned_path = Path("output/rightmove_cleaned.csv")
df.to_csv(cleaned_path, index=False)
logging.info(f"Cleaned data saved to {cleaned_path}")

# --- Visualize Price Distribution ---
# Create a histogram with a Kernel Density Estimate (KDE) curve to show price distribution.
plt.figure(figsize=(10, 6))
sns.histplot(df["price_clean"], bins=30, kde=True, color="skyblue")
plt.title("Property Price Distribution")
plt.xlabel("Price (Â£)")
plt.ylabel("Count")
plt.tight_layout()  # Adjust layout to prevent labels from overlapping

# Save the plot as a PNG image in the 'output' directory.
plot_path = Path("output/price_distribution.png")
plt.savefig(plot_path)
logging.info(f"Price distribution plot saved to {plot_path}")

# Display the plot (will only show if running in an environment with a GUI, like a local script or Jupyter notebook).
plt.show()

logging.info("Analysis script finished.")
